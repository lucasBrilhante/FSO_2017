#include <stdio.h>
#include <stdlib.h>

 
typedef struct _no {
    int num;
    struct _no  *prox;
} no;
typedef struct _cab {
    struct _no  *head;
    struct _no  *tail;
} cab;
void imprime_lista(cab *cabecalho) {
    no  *p;
     
    if (cabecalho->tail == NULL) {
        printf("\n\n >> cab vazia << \n");
    } else {
        printf("Primeiro no: %d \n",cabecalho->head->num);
        printf("Ultimo   no: %d \n",cabecalho->tail->num);
        p = cabecalho->head;
        while (p != NULL) {
            printf("%d \n",p->num);
            p = p->prox;
        } /* fim-while */
    }
    printf("\n");
}
 
/*void insere_inicio(cab *cabecalho) {
    no  *novo;
    int n,char c;
    printf("Digite N: ");
    scanf("%c%d", &c,&n);
     
    novo = (no *) malloc(sizeof(no));
    novo->letra = c;
    novo->num = n;
    novo->prox   = cabecalho->head;
    novo->back   = NULL;
    cabecalho->head = novo;
 
    if (cabecalho->tail == NULL) {
        cabecalho->tail = novo;
    }
    imprime_cab(cabecalho);
     
} 
 
 

 
void remove_elemento(cab *cabecalho) {
    no *p;
    int n; 
    char c;
     
    printf("Digite N a ser excluido : ");
    scanf("%c %d", &c,&n);
    p = cabecalho->head;
    while (p != NULL) {
        if ((p->letra == c)||(p-> num == n));  {
            p -> back ->prox = p->prox;
            p -> prox ->back = p->back;
            free(p);
            p = cabecalho->tail;
        } 
        p = p->prox;
    } 
    imprime_cab(cabecalho);
} 
 
no busca(int x,char n,*cabecalho){
    no *p;
    p=cabecalho ->head;
    while(p!=NULL){
        if(p -> letra == x,p->num == c){  
            return p;
            p = NULL;       
        }   
    }
}*/
/* no busca2(int x,no *p){
    if(p==NULL)
        return(p);
        else if(p->letra,num == x)
            return(p);
    return(busca2(x,p->prox));
}*/
void insere_final(cab *cabecalho, int i) {
    no  *novo;
    int n;
     
 
    novo = (no *) malloc(sizeof(no));
    novo->num=i;
    novo->prox = NULL;

    if (cabecalho->tail == NULL) {
        cabecalho->tail = novo;
        cabecalho->head = novo;
    } else {
        cabecalho->tail->prox = novo;
        cabecalho->tail = novo; 
    }

} 

int main (void) {
    cab *cabecalho;

    int n;
    int i;
     
    cabecalho = (cab *) malloc(sizeof(cab));
    cabecalho->head = NULL;
    cabecalho->tail = NULL;
    
    for(i = 0; i<10 ; i++){
        insere_final(cabecalho, i);
    }
    imprime_lista(cabecalho);
    printf("\n");
    free (cabecalho);
} /* fim-main */
